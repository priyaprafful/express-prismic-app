import { DateField, TimestampField, FilledLinkToDocumentField, LinkField, RichTextField, PrismicDocument } from '@prismicio/types';
import { RichTextFunctionSerializer, RichTextMapSerializer } from '@prismicio/richtext';
export { Element, asText } from '@prismicio/richtext';

/**
 * Transforms a date or timestamp field into a JavaScript Date object
 *
 * @param dateOrTimestampField - A date or timestamp field from Prismic
 *
 * @returns A Date object, null if provided date is falsy
 *
 * @see Templating date field from Prismic {@link https://prismic.io/docs/technologies/templating-date-field-javascript}
 */
declare const asDate: (dateOrTimestampField: DateField | TimestampField) => Date | null;

/**
 * Resolves a link to a Prismic document to a URL
 *
 * @param linkToDocumentField - A document link field to resolve
 *
 * @returns Resolved URL
 *
 * @typeParam ReturnType - Return type of your link resolver function, useful if you prefer to return a complex object
 *
 * @see Prismic link resolver documentation: {@link https://prismic.io/docs/technologies/link-resolver-javascript}
 */
declare type LinkResolverFunction<ReturnType = string> = (linkToDocumentField: Omit<FilledLinkToDocumentField, "url">) => ReturnType;
/**
 * Serializes a node from a rich text or title field with a function to HTML
 *
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare type HTMLFunctionSerializer = RichTextFunctionSerializer<string>;
/**
 * Serializes a node from a rich text or title field with a map to HTML
 *
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare type HTMLMapSerializer = RichTextMapSerializer<string>;

/**
 * Resolves any type of link field to a URL
 *
 * @param linkField - Any kind of link field to resolve
 * @param [linkResolver] - An optional link resolver function, without it you're expected to use the `routes` options from the API
 *
 * @returns Resolved URL, null if provided link is empty
 *
 * @typeParam LinkResolverFunctionReturnType - Link resolver function return type
 *
 * @see Prismic link resolver documentation: {@link https://prismic.io/docs/technologies/link-resolver-javascript}
 * @see Prismic API `routes` options documentation: {@link https://prismic.io/docs/technologies/route-resolver-nuxtjs}
 */
declare const asLink: <LinkResolverFunctionReturnType = string>(linkField: LinkField, linkResolver?: LinkResolverFunction<LinkResolverFunctionReturnType> | null | undefined) => string | LinkResolverFunctionReturnType | null;

/**
 * Serializes a rich text or title field to an HTML string
 *
 * @param richTextField - A rich text or title field from Prismic
 * @param [linkResolver] - An optional link resolver function to resolve links, without it you're expected to use the `routes` options from the API
 * @param [htmlSerializer] - An optional serializer, unhandled cases will fallback to the default serializer
 *
 * @returns HTML equivalent of the provided rich text or title field
 *
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare function asHTML(richTextField: RichTextField, linkResolver?: LinkResolverFunction<string> | null, htmlSerializer?: HTMLFunctionSerializer | HTMLMapSerializer | null): string;

/**
 * Converts a document into a link field
 * This is useful when crawling the API for document links
 *
 * @param prismicDocument - A document coming from Prismic
 *
 * @returns The equivalent link field to use with `asLink()`
 *
 * @typeParam Document - Specific interface of the provided document
 */
declare const documentToLinkField: <Document_1 extends PrismicDocument<Record<string, unknown>, string, string>>(prismicDocument: Document_1) => FilledLinkToDocumentField<Document_1["type"], Document_1["lang"], Document_1["data"]>;

/**
 * Pipes {@link documentToLinkField} and {@link asLink} to resolve a document to a link in a single function call
 *
 * @param prismicDocument - A document coming from Prismic
 * @param [linkResolver] - An optional link resolver function, without it you're expected to use the `routes` options from the API
 *
 * @returns Resolved document URL, null if provided link is empty
 *
 * @typeParam Document - Specific interface of the provided document
 * @typeParam LinkResolverFunctionReturnType - Link resolver function return type
 *
 * @see Prismic link resolver documentation: {@link https://prismic.io/docs/technologies/link-resolver-javascript}
 * @see Prismic API `routes` options documentation: {@link https://prismic.io/docs/technologies/route-resolver-nuxtjs}
 */
declare const documentAsLink: <Document_1 extends PrismicDocument<Record<string, unknown>, string, string>, LinkResolverFunctionReturnType = string>(prismicDocument: Document_1, linkResolver?: LinkResolverFunction<LinkResolverFunctionReturnType> | null | undefined) => string | LinkResolverFunctionReturnType | null;

export { HTMLFunctionSerializer, HTMLMapSerializer, LinkResolverFunction, asDate, asHTML, asLink, documentAsLink, documentToLinkField };
